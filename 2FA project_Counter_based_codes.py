# I am implementing a counter based 2FA here, instead of a time based. Biggest difference is that the codes changed
# based on how many successful sign-ins there are.
# Inspiration from Jothin Kumar

from onetimepass import valid_hotp
from secrets import choice


def generate_secret():  # This will generate a random string with length of 16.
    secret = ''
    while len(secret) < 16:
        secret += choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567')
    return secret

# I am using the Google authenticator, but you can use whatever floats your boat.
secret = generate_secret()
print('Enter the following secret in your authenticator app: ', secret)
print("""
Instructions for saving this secret it Google Authenticator:
1. Open Google Authenticator.
2. Click plus icon at the right bottom.
3. Click Enter a setup key.
4. Enter an Account name of your choice and enter the secret provided above.
5. Click Add.
""")
while True:
    counter = 0
    otp = int(input('Please enter the otp generated by your authenticator app: '))
    authenticated = valid_hotp(otp, secret)
    if authenticated:
        print('Correct otp, Authenticated!')
        counter += 1
    elif not authenticated:
        print('Wrong otp, please try again.')